<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>ch.vd.tep.osec</groupId>
	<artifactId>osec</artifactId>
	<packaging>pom</packaging>
	<name>OSEC</name>
	<version>1.0.0-SNAPSHOT</version>
	
	<organization>
		<name>Etat de Vaud</name>
		<url>https://www.vd.ch/</url>
	</organization>
	
	<issueManagement>
		<system>JIRA</system>
		<url>https://www.portail.vd.ch/outils/jira/projects/OSEC/issues/OSEC-1?filter=allopenissues</url>
	</issueManagement>

	<properties>
		<!-- Project properties -->
		<osec-commons-dir>osec-commons</osec-commons-dir>
		<osec-interface-dir>osec-interfaces</osec-interface-dir>
		<osec.version>1.0</osec.version>
		<!-- ********************* 	-->
		<!-- Build properties 		-->
		<!-- ********************* 	-->
		<maven.version>3.0.0</maven.version>
		<java.version>1.8</java.version>
		<maven.build.timestamp.format>yyyyMMddHHmmss</maven.build.timestamp.format>
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<scala.version>2.12.6</scala.version>
		<node.version>v8.12.0</node.version>
		<npm.version>6.4.1</npm.version>
		<project.testresult.directory>${project.build.directory}/test-results</project.testresult.directory>
		<argLine>-Djava.security.egd=file:/dev/./urandom -Xmx256m</argLine>
		<m2e.apt.activation>jdt_apt</m2e.apt.activation>
		<run.addResources>false</run.addResources>
		<!-- These remain empty unless the corresponding profile is active -->
		<profile.no-liquibase/>
		<profile.swagger/>
		<profile.tls/>

		<file.encoding>UTF-8</file.encoding>
		<project.build.sourceEncoding>${file.encoding}</project.build.sourceEncoding>
		<project.reporting.outputEncoding>${file.encoding}</project.reporting.outputEncoding>

		<!-- Conf Jenkins et Nexus-->
		<server.ic.host>FIX_ME</server.ic.host>
		<server.nexus.base.url>http://${server.ic.host}/nexus</server.nexus.base.url>
		<server.jenkins.base.url>http://${server.ic.host}/jenkins</server.jenkins.base.url>

		<my.build.directory>target</my.build.directory>

		<!-- ********************* 	-->
		<!-- Plugin versions 		-->
		<!-- ********************* 	-->
		<maven-clean-plugin.version>3.1.0</maven-clean-plugin.version>
		<maven-compiler-plugin.version>3.8.0</maven-compiler-plugin.version>
		<maven-enforcer-plugin.version>3.0.0-M2</maven-enforcer-plugin.version>
		<maven-resources-plugin.version>3.1.0</maven-resources-plugin.version>
		<maven-surefire-plugin.version>2.22.0</maven-surefire-plugin.version>
		<maven-war-plugin.version>3.2.2</maven-war-plugin.version>
		<maven-jar-plugin.version>3.1.0</maven-jar-plugin.version>
		<dockerfile-maven-plugin.version>1.4.4</dockerfile-maven-plugin.version>
		<frontend-maven-plugin.version>1.6</frontend-maven-plugin.version>
		<jacoco-maven-plugin.version>0.8.2</jacoco-maven-plugin.version>
		<scala-maven-plugin.version>3.4.2</scala-maven-plugin.version>
		<sonar-maven-plugin.version>3.5.0.1254</sonar-maven-plugin.version>
		<git-commit-id-plugin.version>2.2.5</git-commit-id-plugin.version>
		<!-- ********************* 	-->

		<!-- ********************* 	-->
		<!-- Dependencies versions 	-->
		<!-- ********************* 	-->
		<jhipster-dependencies.version>2.0.22</jhipster-dependencies.version>
		<!-- The spring-boot version should match the one managed by
        https://mvnrepository.com/artifact/io.github.jhipster/jhipster-dependencies/${jhipster-dependencies.version} -->
		<spring-boot.version>2.0.5.RELEASE</spring-boot.version>
		<!-- The hibernate version should match the one managed by
        https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies/${spring-boot.version} -->
		<hibernate.version>5.2.17.Final</hibernate.version>
		<!-- The javassist version should match the one managed by
        https://mvnrepository.com/artifact/org.hibernate/hibernate-core/${hibernate.version} -->
		<javassist.version>3.22.0-GA</javassist.version>
		<!-- The liquibase version should match the one managed by
        https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies/${spring-boot.version} -->
		<liquibase.version>3.5.5</liquibase.version>
		<liquibase-hibernate5.version>3.6</liquibase-hibernate5.version>
		<validation-api.version>2.0.1.Final</validation-api.version>
		<mapstruct.version>1.2.0.Final</mapstruct.version>
		<lib.commons-io.version>2.6</lib.commons-io.version>
		<lib.commons-lang3.version>3.8</lib.commons-lang3.version>
		<lib.guava.version>26.0-jre</lib.guava.version>
		<oracle-driver.version>12.2.0.1</oracle-driver.version>
		<spring.batch.version>4.0.1.RELEASE</spring.batch.version>
		<shared-iam.version>2.8.0</shared-iam.version>
		<!-- ********************* 	-->

		<!-- ********************* 	-->
		<!-- Sonar properties 		-->
		<!-- ********************* 	-->
		<sonar.host.url>http://localhost:9001</sonar.host.url>
		<sonar.exclusions>src/main/webapp/content/**/*.*, src/main/webapp/i18n/*.js, target/www/**/*.*
		</sonar.exclusions>
		<sonar.issue.ignore.multicriteria>S3437,S4502,S4684,UndocumentedApi,BoldAndItalicTagsCheck
		</sonar.issue.ignore.multicriteria>
		<!-- Rule https://sonarcloud.io/coding_rules?open=Web%3ABoldAndItalicTagsCheck&rule_key=Web%3ABoldAndItalicTagsCheck is ignored. Even if we agree that using the "i" tag is an awful practice, this is what is recommended by http://fontawesome.io/examples/ -->
		<sonar.issue.ignore.multicriteria.BoldAndItalicTagsCheck.resourceKey>src/main/webapp/app/**/*.*
		</sonar.issue.ignore.multicriteria.BoldAndItalicTagsCheck.resourceKey>
		<sonar.issue.ignore.multicriteria.BoldAndItalicTagsCheck.ruleKey>Web:BoldAndItalicTagsCheck
		</sonar.issue.ignore.multicriteria.BoldAndItalicTagsCheck.ruleKey>
		<!-- Rule https://sonarcloud.io/coding_rules?open=squid%3AS3437&rule_key=squid%3AS3437 is ignored, as a JPA-managed field cannot be transient -->
		<sonar.issue.ignore.multicriteria.S3437.resourceKey>src/main/java/**/*
		</sonar.issue.ignore.multicriteria.S3437.resourceKey>
		<sonar.issue.ignore.multicriteria.S3437.ruleKey>squid:S3437</sonar.issue.ignore.multicriteria.S3437.ruleKey>
		<!-- Rule https://sonarcloud.io/coding_rules?open=squid%3AUndocumentedApi&rule_key=squid%3AUndocumentedApi is ignored, as we want to follow "clean code" guidelines and classes, methods and arguments names should be self-explanatory -->
		<sonar.issue.ignore.multicriteria.UndocumentedApi.resourceKey>src/main/java/**/*
		</sonar.issue.ignore.multicriteria.UndocumentedApi.resourceKey>
		<sonar.issue.ignore.multicriteria.UndocumentedApi.ruleKey>squid:UndocumentedApi
		</sonar.issue.ignore.multicriteria.UndocumentedApi.ruleKey>
		<!-- Rule https://sonarcloud.io/coding_rules?open=squid%3AS4502&rule_key=squid%3AS4502 is ignored, as for JWT tokens we are not subject to CSRF attack -->
		<sonar.issue.ignore.multicriteria.S4502.resourceKey>src/main/java/**/*
		</sonar.issue.ignore.multicriteria.S4502.resourceKey>
		<sonar.issue.ignore.multicriteria.S4502.ruleKey>squid:S4502</sonar.issue.ignore.multicriteria.S4502.ruleKey>
		<!-- Rule https://sonarcloud.io/coding_rules?open=squid%3AS4684&rule_key=squid%3AS4684 -->
		<sonar.issue.ignore.multicriteria.S4684.resourceKey>src/main/java/**/*
		</sonar.issue.ignore.multicriteria.S4684.resourceKey>
		<sonar.issue.ignore.multicriteria.S4684.ruleKey>squid:S4684</sonar.issue.ignore.multicriteria.S4684.ruleKey>
		<sonar.jacoco.reportPaths>${project.testresult.directory}/coverage/jacoco/jacoco.exec</sonar.jacoco.reportPaths>
		<sonar.java.codeCoveragePlugin>jacoco</sonar.java.codeCoveragePlugin>
		<sonar.testExecutionReportPaths>${project.testresult.directory}/jest/TESTS-results-sonar.xml
		</sonar.testExecutionReportPaths>
		<sonar.typescript.lcov.reportPaths>${project.testresult.directory}/lcov.info</sonar.typescript.lcov.reportPaths>
		<sonar.sources>${project.basedir}/src/main/</sonar.sources>
		<sonar.surefire.reportsPath>${project.testresult.directory}/surefire-reports</sonar.surefire.reportsPath>
		<sonar.tests>${project.basedir}/src/test/</sonar.tests>
		<!-- ********************* 	-->

	</properties>

	<modules>
		<module>osec-application</module>
		<module>osec-interfaces</module>
		<module>osec-commons</module>
		<module>osec-excel-reader</module>
        <module>osec-build-tools</module>
		<module>osec-packaging</module>
		<module>osec-core-domain</module>
		<module>osec-core-security</module>
        <module>osec-core-batch</module>
    </modules>

	<build>
		<defaultGoal>clean install</defaultGoal>
		<plugins>
			<plugin>
				<groupId>org.sonarsource.scanner.maven</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>${sonar-maven-plugin.version}</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>${maven-enforcer-plugin.version}</version>
				<executions>
					<execution>
						<id>enforce-versions</id>
						<goals>
							<goal>enforce</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<rules>
						<requireMavenVersion>
							<message>You are running an older version of Maven. JHipster requires at least Maven ${maven.version}</message>
							<version>[${maven.version},)</version>
						</requireMavenVersion>
						<requireJavaVersion>
							<!-- Until JHipster supports JDK 9 -->
							<message>You are running an incompatible version of Java. JHipster requires JDK ${java.version}</message>
							<version>[1.8,1.9)</version>
						</requireJavaVersion>
					</rules>
				</configuration>
			</plugin>
				<plugin>
					<groupId>pl.project13.maven</groupId>
					<artifactId>git-commit-id-plugin</artifactId>
					<version>2.2.5</version>
					<executions>
						<execution>
							<goals>
								<goal>revision</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<commitIdGenerationMode>flat</commitIdGenerationMode>
						<gitDescribe>
							<skip>true</skip>
						</gitDescribe>
					</configuration>
				</plugin>
		</plugins>
	</build>
	
	<distributionManagement>
		<repository>
			<id>osec-releases</id>
			<url>${server.nexus.base.url}/content/repositories/releases</url>
		</repository>

		<snapshotRepository>
			<id>osec-snapshots</id>
			<url>${server.nexus.base.url}/content/repositories/snapshots</url>
		</snapshotRepository>
	</distributionManagement>

	<ciManagement>
		<system>jenkins</system>
		<url>${server.jenkins.base.url}</url>
		<notifiers>
			<notifier>
				<type>mail</type>
				<sendOnError>true</sendOnError>
				<sendOnFailure>true</sendOnFailure>
				<sendOnSuccess>false</sendOnSuccess>
				<sendOnWarning>true</sendOnWarning>
				<configuration>
					<address>sbucci@sqli.com</address>
				</configuration>
			</notifier>
		</notifiers>
	</ciManagement>

	<scm>
		<connection>FIX_ME</connection>
		<url>FIX_ME</url>
		<developerConnection>FIX_ME</developerConnection>
	</scm>

	<profiles>
		<profile>
			<!-- This profile can be used to download dependencies from ACV
			such as Shared IAM or ESB client -->
			<id>nexus</id>
			<repositories>
				<repository>
					<name>ACV Nexus Public</name>
					<id>ACV-Nexus</id>
					<!-- This should be changed to an OSEC repository when available -->
					<url>http://nexus.etat-de-vaud.ch/repository/tao-public</url>
				</repository>
			</repositories>
		</profile>
	</profiles>
</project>