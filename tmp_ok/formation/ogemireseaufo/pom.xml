<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>ch.vd.formation</groupId>
  <artifactId>ogemireseaufo</artifactId>
  <version>1.4.1-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>OGEMI - RESEAU</name>

  <!--
  Pour builder l'application puis livrer dans
  XFile et DevEx une version SNAPSHOT:
  mvn -Pxfile,xfile.snap,devex.release,devex.in clean install

  Pour builder l'application puis livrer dans XFile et DevEx une version FIXED:
  mvn release:prepare
  mvn release:perform
  -->

  <parent>
    <groupId>org.springframework.boot</groupId>
    <!-- On ne veut que des dépendences sur maven central excepté prestations-be -->
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.7.10</version>
    <relativePath />
  </parent>

  <scm>
    <developerConnection>scm:git:ssh://git@bitbucket.etat-de-vaud.ch/formation/ogemireseaufo.git</developerConnection>
    <tag>1.3.1</tag>
  </scm>

  <profiles>
    <profile>
      <id>platform-windows</id>
      <activation>
        <os>
          <family>windows</family>
        </os>
      </activation>
      <properties>
        <!-- Override the executable names for Windows -->
        <npm.executable>npm.cmd</npm.executable>
        <yarn.executable>yarn.cmd</yarn.executable>
        <ng.executable>ng.cmd</ng.executable>
      </properties>
    </profile>
    <profile>
      <!-- Pas de build du front -->
      <id>nof</id>
      <properties>
        <build.nofront>true</build.nofront>
        <skipTests>true</skipTests>
      </properties>
    </profile>
    <profile>
      <id>not</id>
      <!-- NOTests -->
      <properties>
        <skipTests>true</skipTests>
      </properties>
    </profile>
    <profile>
      <id>nexus</id>
      <build>
        <plugins>
          <!-- Pour générer le fichier pour le CEI -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-assembly-plugin</artifactId>
            <version>${maven-assembly-plugin.version}</version>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>single</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <descriptors>
                <descriptor>assembly.xml</descriptor>
              </descriptors>
              <finalName>${assembly.finalName}</finalName>
              <appendAssemblyId>false</appendAssemblyId>
              <tarLongFileMode>posix</tarLongFileMode>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-install-plugin</artifactId>
            <executions>
              <execution>
                <id>default-install</id>
                <phase>none</phase>
              </execution>
            </executions>
          </plugin>
          <!-- After creating the assembly, we only keep the .tar.gz, otherwise, the deploy goal will upload both the jar and the assembly -->
          <!-- Using deploy:deploy-file is not convenient, because we cannot cleanly choose the repository type, ie SNAPSHOT vs STABLE to which we want to upload -->
          <plugin>
            <artifactId>maven-clean-plugin</artifactId>
            <executions>
              <execution>
                <!-- we can't override this id -->
                <id>default-clean</id>
                <phase>install</phase>
                <goals>
                  <goal>clean</goal>
                </goals>
                <configuration>
                  <excludeDefaultDirectories>true</excludeDefaultDirectories>
                  <filesets>
                    <fileset>
                      <directory>${project.build.directory}</directory>
                      <excludes>
                        <exclude>${project.artifactId}-${project.version}.tar.gz</exclude>
                      </excludes>
                    </fileset>
                  </filesets>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>devex.release</id>
      <build>
        <plugins>
          <plugin>
            <groupId>ch.vd.devex</groupId>
            <artifactId>devex-maven-plugin</artifactId>
            <version>${devex-maven-plugin.version}</version>
            <configuration>
              <configTag>${devex.configTag}</configTag>
            </configuration>
            <executions>
              <execution>
                <id>release</id>
                <phase>package</phase>
                <goals>
                  <goal>create-release</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>devex.docker</id>
      <properties>
        <devex.deployTarget>Docker</devex.deployTarget>
      </properties>
    </profile>
    <profile>
      <id>devex.in</id>
      <build>
        <plugins>
          <plugin>
            <groupId>ch.vd.devex</groupId>
            <artifactId>devex-maven-plugin</artifactId>
            <version>${devex-maven-plugin.version}</version>
            <configuration>
              <deployUnit>${devex.deployUnit}</deployUnit>
              <deployTarget>${devex.deployTarget}</deployTarget>
              <environment>IN</environment>
              <releaseVersion>${devex.releaseVersion}</releaseVersion>
              <configTag>${devex.configTag}</configTag>
            </configuration>
            <executions>
              <execution>
                <id>deploy</id>
                <phase>deploy</phase>
                <goals>
                  <goal>deploy</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>2021.0.3</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>javax.xml.bind</groupId>
      <artifactId>jaxb-api</artifactId>
      <version>${jaxb-api.version}</version>
    </dependency>
    <dependency>
      <groupId>jakarta.xml.bind</groupId>
      <artifactId>jakarta.xml.bind-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jaxb</groupId>
      <artifactId>jaxb-runtime</artifactId>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
    </dependency>
    <!-- for hibernate-validator -->
    <dependency>
      <groupId>org.glassfish</groupId>
      <artifactId>javax.el</artifactId>
      <version>${javax.el.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.hateoas</groupId>
      <artifactId>spring-hateoas</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-sleuth</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
    </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-aop</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.retry</groupId>
      <artifactId>spring-retry</artifactId>
    </dependency>
    <dependency>
      <groupId>ch.vd.cybersdk</groupId>
      <artifactId>prestations-be</artifactId>
      <version>${prestations-be.version}</version>
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>${commons-io.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>${commons-lang3.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-text</artifactId>
      <version>${commons-text.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-collections4</artifactId>
      <version>${commons-collections4.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jsr310</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct</artifactId>
      <version>${mapstruct.version}</version>
    </dependency>

    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct-processor</artifactId>
      <version>${mapstruct.version}</version>
    </dependency>

    <!-- Tests -->
    <dependency>
      <groupId>ch.vd.cybersdk</groupId>
      <artifactId>prestations-be</artifactId>
      <version>${prestations-be.version}</version>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-inline</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.lowagie</groupId>
      <artifactId>itext</artifactId>
      <version>2.1.7</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
        <version>${maven-release-plugin.version}</version>
        <configuration>
          <goals>${release.goals}</goals>
          <releaseProfiles>${release.profiles}</releaseProfiles>
          <updateDependencies>false</updateDependencies>
          <pushChanges>true</pushChanges>
          <tagNameFormat>@{project.version}</tagNameFormat>
          <arguments>-Dmaven.javadoc.skip=true</arguments>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>buildnumber-maven-plugin</artifactId>
        <version>${buildnumber-maven-plugin.version}</version>
        <executions>
          <execution>
            <phase>validate</phase>
            <goals>
              <goal>create</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <format>{0,date,yyyy-MM-dd HH:mm:ss}</format>
          <items>
            <item>timestamp</item>
          </items>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin.version}</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>${exec-maven-plugin.version}</version>
        <configuration>
          <workingDirectory>${front.srcPath}</workingDirectory>
        </configuration>
        <executions>
          <execution>
            <id>exec-yarn-install</id>
            <phase>prepare-package</phase>
            <configuration>
              <executable>${yarn.executable}</executable>
              <arguments>
                <argument>--pure-lockfile</argument>
              </arguments>
              <skip>${build.nofront}</skip>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <id>exec-ngcli-lint</id>
            <phase>prepare-package</phase>
            <configuration>
              <executable>${yarn.executable}</executable>
              <arguments>
                <argument>run</argument>
                <argument>lint</argument>
              </arguments>
              <skip>${skipTests}</skip>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <id>exec-ngcli-test</id>
            <phase>prepare-package</phase>
            <configuration>
              <executable>${yarn.executable}</executable>
              <arguments>
                <argument>run</argument>
                <argument>test</argument>
              </arguments>
              <skip>${skipTests}</skip>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <id>exec-ngcli-build</id>
            <phase>prepare-package</phase>
            <configuration>
              <executable>${yarn.executable}</executable>
              <arguments>
                <argument>run</argument>
                <argument>build</argument>
              </arguments>
              <skip>${build.nofront}</skip>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack</id>
            <phase>process-resources</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>ch.vd.cybersdk</groupId>
                  <artifactId>prestations-be</artifactId>
                  <outputDirectory>${project.build.directory}/unfiltered-config</outputDirectory>
                  <includes>build-infos.txt</includes>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>${maven-resources-plugin.version}</version>
        <configuration>
          <encoding>${project.build.sourceEncoding}</encoding>
        </configuration>
        <executions>
          <execution>
            <id>copy-ngcli-dist</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${basedir}/target/classes/static</outputDirectory>
              <resources>
                <resource>
                  <directory>${front.distPath}</directory>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-config</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/classes</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/unfiltered-config</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <executable>true</executable>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco-maven-plugin.version}</version>
        <configuration>
          <destFile>${sonar.jacoco.reportPaths}</destFile>
          <append>true</append>
        </configuration>
        <executions>
          <execution>
            <id>agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>ch.vd.cyber</groupId>
        <artifactId>package-json-dependencies-maven-plugin</artifactId>
        <version>1.0.0</version>
        <executions>
          <execution>
            <goals>
              <goal>package-json-dependencies</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.jvnet.jaxb2.maven2</groupId>
        <artifactId>maven-jaxb2-plugin</artifactId>
        <version>${maven-jaxb2-plugin.version}</version>
        <configuration>
          <strict>false
          </strict> <!-- see https://github.com/highsource/maven-jaxb2-plugin/wiki/Catalogs-in-Strict-Mode -->
          <schemaDirectory>${basedir}/src/main/resources/xsd/</schemaDirectory>
          <bindingDirectory>${basedir}/src/main/resources/xjb/</bindingDirectory>
          <args>
            <arg>-extension</arg>
            <arg>-Xvalue-constructor</arg>
            <arg>-Xnamespace-prefix</arg>
          </args>
        </configuration>

        <executions>
          <execution>
            <id>schema-generate</id>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <bindingIncludes>
                <include>bindings.xjb</include>
              </bindingIncludes>
              <schemaIncludes>
                <include>ogemireseaufo.xsd</include>
              </schemaIncludes>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.jvnet.jaxb2_commons</groupId>
            <artifactId>jaxb2-value-constructor</artifactId>
            <version>${jaxb2-value-constructor.version}</version>
          </dependency>
          <dependency>
            <groupId>org.jvnet.jaxb2_commons</groupId>
            <artifactId>jaxb2-namespace-prefix</artifactId>
            <version>${jaxb2-namespace-prefix.version}</version>
          </dependency>
        </dependencies>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>enforce-versions</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>3.6.3</version>
                </requireMavenVersion>
              </rules>
              <fail>true</fail>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <distributionManagement>
    <repository>
      <id>nexus-dgnsi-server</id>
      <name>Nexus DGNSI</name>
      <url>${nexus.url}/app-${application.repository}-stable</url>
    </repository>
    <snapshotRepository>
      <id>nexus-dgnsi-server</id>
      <name>Nexus DGNSI</name>
      <url>${nexus.url}/app-${application.repository}-snapshots</url>
      <uniqueVersion>false</uniqueVersion>
    </snapshotRepository>
  </distributionManagement>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <java.version>11</java.version>


    <assembly.finalName>${project.artifactId}-${project.version}</assembly.finalName>
    <build.nofront>false</build.nofront>
    <skipTests>false</skipTests>

    <commons-lang3.version>3.11</commons-lang3.version>
    <commons-io.version>2.8.0</commons-io.version>
    <commons-text.version>1.9</commons-text.version>
    <commons-collections4.version>4.4</commons-collections4.version>
    <mapstruct.version>1.4.1.Final</mapstruct.version>

    <!-- libs DSI -->
    <prestations-be.version>16.4.9</prestations-be.version>

    <!-- maven plugins -->
    <maven-resources-plugin.version>3.3.1</maven-resources-plugin.version>
    <exec-maven-plugin.version>3.1.0</exec-maven-plugin.version>
    <maven-assembly-plugin.version>3.6.0</maven-assembly-plugin.version>
    <maven-release-plugin.version>3.0.0</maven-release-plugin.version>
    <buildnumber-maven-plugin.version>1.4</buildnumber-maven-plugin.version>
    <devex-maven-plugin.version>2.0.0</devex-maven-plugin.version>
    <jaxb2-value-constructor.version>3.0</jaxb2-value-constructor.version>
    <jaxb2-namespace-prefix.version>1.3</jaxb2-namespace-prefix.version>
    <maven-jaxb2-plugin.version>0.15.3</maven-jaxb2-plugin.version>

    <jaxb-api.version>2.3.1</jaxb-api.version>
    <javax.el.version>3.0.1-b08</javax.el.version>

    <!-- executables -->
    <yarn.executable>yarn</yarn.executable>
    <ng.executable>ng</ng.executable>
    <npm.executable>npm</npm.executable>

    <!-- Profiles pour DevEx, peut-etre overridé par application ou par un process Jenkins -->
    <devex.profiles>devex.release,devex.in</devex.profiles>
    <devex.releaseVersion>${project.version}</devex.releaseVersion>
    <devex.deployUnit>ogemireseaufo</devex.deployUnit>
    <devex.deployTarget>Embedded</devex.deployTarget>

    <release.profiles>not,nexus,${devex.profiles}</release.profiles>

    <!-- Les goals assembly:single et cei:upload sont deja pris par xfile -->
    <release.goals>clean deploy</release.goals>


    <!-- Le TAG de config correspondant dans le repository GIT de configuration -->
    <!--suppress UnresolvedMavenProperty -->
    <devex.configTag>${configTag}</devex.configTag>

    <jacoco-maven-plugin.version>0.8.10</jacoco-maven-plugin.version>

    <!-- Sonar -->
    <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
    <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
    <sonar.jacoco.reportPaths>${project.basedir}/target/jacoco.exec</sonar.jacoco.reportPaths>

    <front.srcPath>${basedir}/front</front.srcPath>
    <front.distPath>front/dist</front.distPath>
  </properties>

</project>
